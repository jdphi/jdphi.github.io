a = 1; //'a' is declared as 1
function pass_by_value(b) {
    y = b;
    console.log("printing b: " + b); //asking the function to print 'b' here, because then 
                                        //'b' variable is within scope, and defined
    return y;
}
console.log("printing a: " + a); //print a
//console.log("printing b: " + b) //this section will not print, because of scope. returns undefined
console.log("printing y: " + pass_by_value(a)); //print y

//^ all of these carry the function 1, because it is passed by reference from 'a'

//now demonstrate that 'a' and 'y' are independent of each other
y = 2; // assign 'y' the val of 2
console.log('printing y a second time: ' + y); //prints 2
console.log('printing a a second time: ' + a); // continues to print 1
// these variables are independent of each other, and are not accessing the same 'object' in memory
console.log('');
console.log('');

//now demonstrate that arrays and objects are different
objectX = {'f': 1}; //define object
function pass_by_object(x) {
    objectY = objectX; //set objectY equal to objectX
    objectY.f = 2; //change the value of the object parameter
    return objectY; //return the new object variable, 'objectY'
}
console.log('the value of objectX prior to running the function is: ')
console.log(objectX)
console.log('the value of objectY is: ')
console.log(pass_by_object(objectX))
console.log('the value of objectX, after running this function is: ')
console.log(objectX)
//by running this code, I can see that passing objects into a function edits the memory object.
//'objectX' and 'objectY' are not independent of each other. They are referencing the same 
//memory object.
//Changing one object variable changes the other.
